C51 COMPILER V9.01   PWM                                                                   07/21/2018 10:35:44 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE PWM
OBJECT MODULE PLACED IN .\obj\pwm.obj
COMPILER INVOKED BY: D:\Keil\C51\BIN\C51.EXE src\pwm.c LARGE BROWSE ORDER INCDIR(.\src) DEBUG OBJECTEXTEND PRINT(.\lst\p
                    -wm.lst) OBJECT(.\obj\pwm.obj)

line level    source

   1          /*---------------------------------------------------------------------*/
   2          /* --- STC MCU Limited ------------------------------------------------*/
   3          /* --- STC15Fxx 系列 使用增强型PWM控制舞台灯光示例---------------------*/
   4          /* --- Mobile: (86)13922805190 ----------------------------------------*/
   5          /* --- Fax: 86-0513-55012956,55012947,55012969 ------------------------*/
   6          /* --- Tel: 86-0513-55012928,55012929,55012966-------------------------*/
   7          /* --- Web: www.STCMCU.com --------------------------------------------*/
   8          /* --- Web: www.GXWMCU.com --------------------------------------------*/
   9          /* 如果要在程序中使用此代码,请在程序中注明使用了STC的资料及程序        */
  10          /* 如果要在文章中应用此代码,请在文章中注明使用了STC的资料及程序        */
  11          /*---------------------------------------------------------------------*/
  12          
  13          //本示例在Keil开发环境下请选择Intel的8058芯片型号进行编译
  14          //若无特别说明,工作频率一般为11.0592MHz
  15          
  16          
  17          #include "pwm.h"
  18          
  19          #define CYCLE 1000
  20          
  21          void car_pwm_set(int car_left, int car_right) {
  22   1              
  23   1              if(car_left >= CYCLE)car_left = CYCLE-1;
  24   1              else if(car_left <= -CYCLE)car_left = -CYCLE+1;
  25   1              else if(car_left == 0)car_left = 1;
  26   1              
  27   1              if(car_right >= CYCLE)car_right = CYCLE-1;
  28   1              else if(car_right <= -CYCLE)car_right = -CYCLE+1;
  29   1              else if(car_right == 0)car_right = 1;
  30   1              
  31   1      
  32   1              car_left = -car_left;
  33   1              car_right = -car_right;
  34   1              
  35   1      //      car_left = car_left/car_dw;
  36   1      //      car_right = car_right/car_dw;
  37   1              
  38   1              if(car_right>0) {
  39   2                      PWM3_SetPwmWide(car_right-1);
  40   2                      PWM2_SetPwmWide(1);
  41   2              } else {
  42   2                      PWM3_SetPwmWide(1);
  43   2                      PWM2_SetPwmWide(-car_right+1);
  44   2              }
  45   1              
  46   1              if(car_left>0) {
  47   2                      PWM4_SetPwmWide(car_left-1);
  48   2                      PWM5_SetPwmWide(1);             
  49   2              } else {
  50   2                      PWM4_SetPwmWide(1);
  51   2                      PWM5_SetPwmWide(-car_left+1);
  52   2              }       
  53   1              
  54   1      //      //总线马达设置    
C51 COMPILER V9.01   PWM                                                                   07/21/2018 10:35:44 PAGE 2   

  55   1      //      sprintf((char *)cmd_return, "#006P%03dT0000!#007P%03dT0000!", 
  56   1      //      (int)(1500+car_left), (int)(1500+car_right));
  57   1      //      zx_uart_send_str(cmd_return);
  58   1              
  59   1              return;
  60   1      }
  61          
  62          void pwm_init(unsigned short cycle){
  63   1          
  64   1      //              P0M0 &= ~0xc0;
  65   1      //    P0M1 &= ~0xc0;
  66   1      //    P0 &= ~0xc0;                    //设置P0.6/.P0.7电平
  67   1      //    
  68   1      //              P2M0 |= 0x0e;
  69   1      //    P2M1 &= ~0x0e;
  70   1      //    P2 &= ~0x0e;                    //设置P2.1/P2.2/P2.3电平
  71   1      //    
  72   1      //              P3M0 |= 0x80;
  73   1      //    P3M1 &= ~0x80;
  74   1      //    P3 &= ~0x80;                    //设置P3.7电平
  75   1      
  76   1          P_SW2 |= 0x80;
  77   1          PWMCKS = 0x1F;
  78   1          PWMC = cycle;                   //设置PWM周期
  79   1          PWM2T1 = 1;
  80   1          PWM2T2 = 0;
  81   1          PWM2CR = 0x00;                  //PWM2输出到P3.7
  82   1          PWM3T1 = 1;
  83   1          PWM3T2 = 0;
  84   1          PWM3CR = 0x00;                  //PWM3输出到P2.1
  85   1          PWM4T1 = 1;
  86   1          PWM4T2 = 0;
  87   1          PWM4CR = 0x00;                  //PWM4输出到P2.2
  88   1          PWM5T1 = 1;
  89   1          PWM5T2 = 0;
  90   1          PWM5CR = 0x00;                  //PWM5输出到P2.3
  91   1      //    PWM6T1 = 1;
  92   1      //    PWM6T2 = 0;
  93   1      //    PWM6CR = 0x08;                  //PWM6输出到P0.7
  94   1      //    PWM7T1 = 1;
  95   1      //    PWM7T2 = 0;
  96   1      //    PWM7CR = 0x08;                  //PWM7输出到P0.6
  97   1          PWMCFG = 0x00;                  //配置PWM的输出初始电平
  98   1          PWMCR = 0x0f;                   //使能PWM信号输出
  99   1          PWMCR |= 0x80;                  //使能PWM模块
 100   1          P_SW2 &= ~0x80;
 101   1      }
 102          
 103          void PWM2_SetPwmWide(unsigned short Wide)
 104          {
 105   1          if (Wide == 0)
 106   1          {
 107   2              PWMCR &= ~0x01;
 108   2              PWM2 = 0;
 109   2          }
 110   1          else if (Wide >= CYCLE)
 111   1          {
 112   2              PWMCR &= ~0x01;
 113   2              PWM2 = 1;
 114   2          }
 115   1          else
 116   1          {
C51 COMPILER V9.01   PWM                                                                   07/21/2018 10:35:44 PAGE 3   

 117   2              P_SW2 |= 0x80;
 118   2              PWM2T1 = Wide;
 119   2              P_SW2 &= ~0x80;
 120   2              PWMCR |= 0x01;
 121   2          }
 122   1      }
 123          
 124          void PWM3_SetPwmWide(unsigned short Wide)
 125          {
 126   1          if (Wide == 0)
 127   1          {
 128   2              PWMCR &= ~0x02;
 129   2              PWM3 = 0;
 130   2          }
 131   1          else if (Wide >= CYCLE)
 132   1          {
 133   2              PWMCR &= ~0x02;
 134   2              PWM3 = 1;
 135   2          }
 136   1          else
 137   1          {
 138   2              P_SW2 |= 0x80;
 139   2              PWM3T1 = Wide;
 140   2              P_SW2 &= ~0x80;
 141   2              PWMCR |= 0x02;
 142   2          }
 143   1      }
 144          
 145          void PWM4_SetPwmWide(unsigned short Wide)
 146          {
 147   1          if (Wide == 0)
 148   1          {
 149   2              PWMCR &= ~0x04;
 150   2              PWM4 = 0;
 151   2          }
 152   1          else if (Wide >= CYCLE)
 153   1          {
 154   2              PWMCR &= ~0x04;
 155   2              PWM4 = 1;
 156   2          }
 157   1          else
 158   1          {
 159   2              P_SW2 |= 0x80;
 160   2              PWM4T1 = Wide;
 161   2              P_SW2 &= ~0x80;
 162   2              PWMCR |= 0x04;
 163   2          }
 164   1      }
 165          
 166          void PWM5_SetPwmWide(unsigned short Wide)
 167          {
 168   1          if (Wide == 0)
 169   1          {
 170   2              PWMCR &= ~0x08;
 171   2              PWM5 = 0;
 172   2          }
 173   1          else if (Wide >= CYCLE)
 174   1          {
 175   2              PWMCR &= ~0x08;
 176   2              PWM5 = 1;
 177   2          }
 178   1          else
C51 COMPILER V9.01   PWM                                                                   07/21/2018 10:35:44 PAGE 4   

 179   1          {
 180   2              P_SW2 |= 0x80;
 181   2              PWM5T1 = Wide;
 182   2              P_SW2 &= ~0x80;
 183   2              PWMCR |= 0x08;
 184   2          }
 185   1      }
 186          
 187          /*
 188          void PWM6_SetPwmWide(unsigned short Wide)
 189          {
 190              if (Wide == 0)
 191              {
 192                  PWMCR &= ~0x10;
 193                  PWM6 = 0;
 194              }
 195              else if (Wide == CYCLE)
 196              {
 197                  PWMCR &= ~0x10;
 198                  PWM6 = 1;
 199              }
 200              else
 201              {
 202                  P_SW2 |= 0x80;
 203                  PWM6T1 = Wide;
 204                  P_SW2 &= ~0x80;
 205                  PWMCR |= 0x10;
 206              }
 207          }
 208          
 209          void PWM7_SetPwmWide(unsigned short Wide)
 210          {
 211              if (Wide == 0)
 212              {
 213                  PWMCR &= ~0x20;
 214                  PWM7 = 0;
 215              }
 216              else if (Wide == CYCLE)
 217              {
 218                  PWMCR &= ~0x20;
 219                  PWM7 = 1;
 220              }
 221              else
 222              {
 223                  P_SW2 |= 0x80;
 224                  PWM7T1 = Wide;
 225                  P_SW2 &= ~0x80;
 226                  PWMCR |= 0x20;
 227              }
 228          }
 229          */


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    560    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----       4
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.

C51 COMPILER V9.01   PWM                                                                   07/21/2018 10:35:44 PAGE 5   


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
