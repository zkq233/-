C51 COMPILER V9.56.0.0   Z_SENSOR                                                          09/20/2018 15:06:25 PAGE 1   


C51 COMPILER V9.56.0.0, COMPILATION OF MODULE Z_SENSOR
OBJECT MODULE PLACED IN .\obj\z_sensor.obj
COMPILER INVOKED BY: d:\Keil_v5\C51\BIN\C51.EXE src\z_sensor.c LARGE OPTIMIZE(8,SPEED) BROWSE ORDER INCDIR(.\src) DEBUG 
                    -OBJECTEXTEND PRINT(.\lst\z_sensor.lst) TABS(2) OBJECT(.\obj\z_sensor.obj)

line level    source

   1          #include <stdio.h>
   2          #include <string.h>
   3          
   4          #include "z_sensor.h"
   5          #include "z_adc.h"
   6          #include "z_global.h"
   7          #include "z_gpio.h"
   8          #include "z_pwm.h"
   9          #include "z_timer.h"
  10          #include "z_uart.h"
  11          #include "z_main.h"
  12          #include "z_w25q64.h"
  13          
  14          
  15          #define COLOR_RED_BASE 132 //红色基准色
  16          #define COLOR_GRN_BASE 168 //绿色基准色
  17          #define COLOR_BLU_BASE 180 //蓝色基准色
  18          int color_red_base, color_grn_base, color_blu_base;
  19          
  20          /*
  21            智能功能代码
  22          */
  23          
  24          //左 P06 右 P07 默认标准输入 0 0
  25          void setup_xunji(void) {
  26   1      //  P0M1 &= ~(1<<6);
  27   1      //  P0M0 &= ~(1<<6);
  28   1      //  
  29   1      //  P0M1 &= ~(1<<7);
  30   1      //  P0M0 &= ~(1<<7);
  31   1      }
  32          
  33          //P10 默认标准输入 0 0
  34          void setup_sound(void) {
  35   1      //  P1M1 &= ~(1<<0);
  36   1      //  P1M0 &= ~(1<<0);
  37   1      }
  38          
  39          //P12 AD
  40          void setup_csb(void) {
  41   1        //adc_init(ADC_CSB);
  42   1      //  P1M0 |= 1<<6;
  43   1      //  P1M1 &= ~(1<<6);
  44   1        
  45   1      //  P1M0 |= 1<<2;
  46   1      //  P1M1 &= ~(1<<2);
  47   1        
  48   1        timer0_init();//超声波计数定时器
  49   1      }
  50          
  51          //P16 AD
  52          void setup_yssb(void) {
  53   1        adc_init(ADC_YSSB);
  54   1        if(eeprom_info.color_base_flag != 0x29) {
C51 COMPILER V9.56.0.0   Z_SENSOR                                                          09/20/2018 15:06:25 PAGE 2   

  55   2          eeprom_info.color_base_flag = 0x29;
  56   2          color_red_base = COLOR_RED_BASE;
  57   2          color_grn_base = COLOR_GRN_BASE;
  58   2          color_blu_base = COLOR_BLU_BASE;
  59   2          rewrite_eeprom();
  60   2          uart1_send_str("No Color!");
  61   2        } else {
  62   2          color_red_base = eeprom_info.color_red_base;
  63   2          color_grn_base = eeprom_info.color_grn_base;
  64   2          color_blu_base = eeprom_info.color_blu_base;
  65   2          uart1_send_str("Get Color!");
  66   2        }
  67   1        sprintf((char *)uart_receive_buf, "red = %d grn = %d blu = %d\r\n", color_red_base, color_grn_base, color
             -_blu_base);
  68   1        uart1_send_str(uart_receive_buf);
  69   1      }
  70          
  71          //初始化传感器IO口
  72          void setup_sensor(void) {
  73   1        setup_xunji();  //初始化循迹
  74   1        setup_sound();  //初始化声音
  75   1        setup_csb();  //初始化超声波
  76   1        setup_yssb(); //初始化颜色识别
  77   1      }
  78          
  79          //处理智能传感器功能
  80          void loop_smart_sensor(void) {
  81   1        if(smart_mode == 0) {
  82   2          smart_xunji();        //循迹模式
  83   2        } else if(smart_mode == 1) {
  84   2          smart_soundjiaqu();     //声控夹取
  85   2        } else if(smart_mode == 2) {
  86   2          smart_ziyoubizhang();   //自由避障
  87   2        } else if(smart_mode == 3) {
  88   2          smart_yssbjiaqu();      //颜色识别
  89   2        } else if(smart_mode == 4) {
  90   2          smart_csbjiaqu();     //定距夹取
  91   2        } else if(smart_mode == 5) {
  92   2          smart_gensui();       //跟随功能
  93   2        } else if(smart_mode == 6) {
  94   2          smart_xunjibizhang();   //循迹避障
  95   2        } else if(smart_mode == 7) {
  96   2          smart_xunjiyanse();     //循迹识别
  97   2        } else if(smart_mode == 8) {
  98   2          smart_xunjicsbjiaqu();    //循迹定距
  99   2        } else if(smart_mode == 9) {
 100   2          smart_yssb_verify();    //颜色校验
 101   2        } else if(smart_mode == 10) {
 102   2          group_do_ok = 1;        //
 103   2        }
 104   1      }
 105          /*************************************************************
 106          函数名称：get_adc_yssb_middle()
 107          功能介绍：获取灰度传感器采集到的值并返回
 108          函数参数：无
 109          返回值：  采集的数据  
 110          *************************************************************/
 111          int get_adc_yssb_middle() {
 112   1        u8 i;
 113   1        static int ad_value[5] = {0}, ad_value_bak[5] = {0}, ad_index = 0, myvalue;
 114   1        ad_value[ad_index] = adc_read(ADC_YSSB);
 115   1        ad_value_bak[ad_index] = ad_value[ad_index];
C51 COMPILER V9.56.0.0   Z_SENSOR                                                          09/20/2018 15:06:25 PAGE 3   

 116   1        ad_index ++ ;
 117   1        if(ad_index == 5)ad_index = 0;
 118   1        selection_sort(ad_value, 5);
 119   1        myvalue = ad_value[2];
 120   1        for(i=0;i<5;i++)ad_value[i] = ad_value_bak[i];
 121   1        return myvalue;  
 122   1      }
 123          /*************************************************************
 124          函数名称：get_csb_value()
 125          功能介绍：采集超声波数据
 126          函数参数：无
 127          返回值：  采集的数据  
 128          *************************************************************/
 129          int get_csb_value(void) {
 130   1          float distance;
 131   1          u16 i = 0, k=0, time;
 132   1          u8 j=120;
 133   1      
 134   1          TH1 = TL1 = csb_cnt = 0; //初始化定时器0
 135   1          Trig = 1; //拉高超声波模块触发IO
 136   1          while(j--); // 延时20us
 137   1          Trig = 0; //拉低超声波模块触发IO
 138   1          i = 0;k=0;
 139   1          while(!Echo);//等待超声波模块输出IO拉高 
 140   1          TR1 = 1; //开启定时器计时
 141   1          while(Echo ); //等待超声波模块输出IO拉低
 142   1          TR1 = 0; //关闭定时器计时
 143   1        
 144   1          //判断是否超出模块最大测距 4m
 145   1          //计算出时间 转换成US 
 146   1          time = (TH1 * 256 + TL1 + csb_cnt*65536) * (1.0000/22.1184);
 147   1          //计算出距离 340m/s =  0.34cm/us 半程 0.17mm/us
 148   1          distance = time * 0.17;
 149   1      
 150   1          //sprintf(cmd_return, "distance = %.2f cm i=%d k=%d\r\n", distance, i, k);
 151   1          //uart1_send_str(cmd_return);
 152   1      
 153   1          //复位定时器
 154   1          TL1 = 0;    //设置定时初值
 155   1          TH1 = 0;    //设置定时初值
 156   1          TF1 = 0;    //清除TF1标志
 157   1          return distance;
 158   1      }
 159          /*************************************************************
 160          函数名称：get_adc_csb_middle()
 161          功能介绍：处理超声波采集到的数据，取采集到的中间值
 162          函数参数：无
 163          返回值：  处理后的超声波数据  
 164          *************************************************************/
 165          int get_adc_csb_middle() {
 166   1        u8 i;
 167   1        static int ad_value[5] = {0}, myvalue;
 168   1        for(i=0;i<5;i++)ad_value[i] = get_csb_value();
 169   1        selection_sort(ad_value, 5);
 170   1        myvalue = ad_value[2];
 171   1        return myvalue;  
 172   1      }
 173          
 174          /*************************************************************
 175          函数名称：smart_xunji()
 176          功能介绍：实现循迹功能
 177          函数参数：无
C51 COMPILER V9.56.0.0   Z_SENSOR                                                          09/20/2018 15:06:25 PAGE 4   

 178          返回值：  无  
 179          *************************************************************/
 180          void smart_xunji(void) {
 181   1        int speed = 500;
 182   1        if((xj0() == 0) && (xj1() == 1)) {
 183   2          car_pwm_set(speed+200, 0);
 184   2        } else if((xj0() == 1) && (xj1() == 1)) {
 185   2          car_pwm_set(speed, speed);
 186   2        } else if((xj0() == 1) && (xj1() == 0)) {
 187   2          car_pwm_set(0, speed+200);
 188   2        } 
 189   1      }
 190          /*************************************************************
 191          函数名称：smart_xunjibizhang()
 192          功能介绍：在循迹的过程中，检测有障碍物，则停止，否则继续循迹
 193          函数参数：无
 194          返回值：  无  
 195          *************************************************************/
 196          void smart_xunjibizhang(void) {
 197   1        static u32 systick_ms_bak = 0;
 198   1        int adc_csb;
 199   1        
 200   1        if(millis() - systick_ms_bak > 50) {
 201   2          systick_ms_bak = millis();
 202   2          //避障处理
 203   2          adc_csb = get_adc_csb_middle();//获取a0的ad值，计算出距离
 204   2          //sprintf((char *)uart_receive_buf, "adc_csb = %d\r\n", adc_csb);
 205   2          //uart1_send_str(uart_receive_buf);
 206   2          if(adc_csb < 250) {//距离低于250mm就停止
 207   3            car_pwm_set(0, 0);
 208   3          } else {
 209   3            //循迹处理
 210   3            smart_xunji();
 211   3          }
 212   2        }
 213   1      }
 214          
 215          /*************************************************************
 216          函数名称：smart_gensui()
 217          功能介绍：检测物体距离，在一定距离内实现跟随功能
 218          函数参数：无
 219          返回值：  无  
 220          *************************************************************/
 221          void smart_gensui(void) {
 222   1        static u32 systick_ms_bak = 0;
 223   1        int speed = 600, adc_csb;
 224   1        if(millis() - systick_ms_bak > 20) {
 225   2          systick_ms_bak = millis();
 226   2          adc_csb = get_adc_csb_middle();//获取a0的ad值，计算出距离
 227   2          if((adc_csb > 300) && (adc_csb < 700)  ) {//距离30~70cm前进
 228   3            car_pwm_set(speed, speed);
 229   3          } else if(adc_csb < 200) {//距离低于20cm就后退
 230   3            car_pwm_set(-speed, -speed);
 231   3          } else {//其他情况停止
 232   3            car_pwm_set(0, 0);
 233   3          }
 234   2        }
 235   1      }
 236          /*************************************************************
 237          函数名称：smart_ziyoubizhang()
 238          功能介绍：识别物体距离从而避开物体前进
 239          函数参数：无
C51 COMPILER V9.56.0.0   Z_SENSOR                                                          09/20/2018 15:06:25 PAGE 5   

 240          返回值：  无  
 241          *************************************************************/
 242          void smart_ziyoubizhang(void) {
 243   1        static u32 systick_ms_bak = 0;
 244   1        int speed = 900, adc_csb;
 245   1        if(millis() - systick_ms_bak > 100) {
 246   2          systick_ms_bak = millis();
 247   2          
 248   2          adc_csb = get_adc_csb_middle();//获取a0的ad值，计算出距离
 249   2      //    sprintf((char *)uart_receive_buf, "adc_csb = %d mm\r\n", adc_csb);
 250   2      //    uart1_send_str(uart_receive_buf);
 251   2          if(adc_csb < 500) {//距离低于50cm就右转
 252   3            car_pwm_set(speed, -speed);
 253   3          } else {
 254   3            car_pwm_set(speed, speed);
 255   3          }
 256   2        }
 257   1      }
 258          /*************************************************************
 259          函数名称：smart_csbjiaqu()
 260          功能介绍：识别物体距离夹取物体
 261          函数参数：无
 262          返回值：  无  
 263          *************************************************************/
 264          void smart_csbjiaqu(void) {
 265   1        static u32 systick_ms_bak = 0;
 266   1        int adc_csb;
 267   1        if(group_do_ok == 0)return;
 268   1        if(check_dj_state())return;
 269   1      
 270   1        //每20ms计算一次
 271   1        if(millis() - systick_ms_bak > 20) {
 272   2          systick_ms_bak = millis();
 273   2          adc_csb = get_adc_csb_middle();//获取a0的ad值，计算出距离
 274   2      //    sprintf((char *)uart_receive_buf, "adc_csb = %d\r\n", adc_csb);
 275   2      //    uart1_send_str(uart_receive_buf);
 276   2          if((adc_csb > 130) && (adc_csb < 170)) {//距离15cm左右就夹取
 277   3            parse_cmd((u8 *)"$DGT:3-11,1!");
 278   3            beep_on_times(1, 100);
 279   3          } 
 280   2        }
 281   1      }
 282          /*************************************************************
 283          函数名称：smart_yssbjiaqu()
 284          功能介绍：识别木块颜色，夹取分别放到不同位置
 285          函数参数：无
 286          返回值：  无  
 287          *************************************************************/
 288          void smart_yssbjiaqu(void) {
 289   1        static u8 getCount = 0, getCountOk = 0, i;
 290   1        static u32 systick_ms_bak = 0, systick_ms_bak2 = 0;
 291   1        static int adc_yssb;
 292   1        
 293   1        if(group_do_ok == 0)return;
 294   1        if(check_dj_state())return;
 295   1        
 296   1      //  sprintf((char *)uart_receive_buf, "millis() = %ld  systick_ms_bak3 = %ld  nextComeTime = %ld\r\n", mill
             -is(), systick_ms_bak3, nextComeTime);
 297   1      //  uart1_send_str(uart_receive_buf);
 298   1          
 299   1        //每20ms获取一次数据
 300   1        if(millis() - systick_ms_bak2 > 20) {
C51 COMPILER V9.56.0.0   Z_SENSOR                                                          09/20/2018 15:06:25 PAGE 6   

 301   2          systick_ms_bak2 = millis();
 302   2          getCount ++;
 303   2          adc_yssb = get_adc_yssb_middle();
 304   2          if( getCount >= 5) {
 305   3            getCount = 0;
 306   3            getCountOk = 1;
 307   3          }
 308   2        }
 309   1        
 310   1        //每5次识别一次
 311   1        if((millis() - systick_ms_bak > 100) && (getCountOk == 1)) {
 312   2          systick_ms_bak = millis();
 313   2          getCountOk = 0;
 314   2          //获取a0的ad值
 315   2          sprintf((char *)uart_receive_buf, "adc_yssb = %d\r\n", adc_yssb);
 316   2          uart1_send_str(uart_receive_buf);
 317   2          
 318   2          if((adc_yssb>color_red_base-10) && (adc_yssb<color_red_base+10)) {
 319   3            //RED
 320   3            for(i=0;i<5;i++) {
 321   4              adc_yssb = get_adc_yssb_middle();
 322   4              mdelay(20);
 323   4            }
 324   3            if((adc_yssb>color_red_base-10) && (adc_yssb<color_red_base+10)) {
 325   4              //uart1_send_str("RED");
 326   4              parse_cmd((u8 *)"$DGT:12-18,1!");
 327   4              beep_on_times(1, 100);
 328   4            }
 329   3          } else if((adc_yssb>color_grn_base-10) && (adc_yssb<color_grn_base+10)) {
 330   3            //GRN
 331   3            for(i=0;i<5;i++) {
 332   4              adc_yssb = get_adc_yssb_middle();
 333   4              mdelay(20);
 334   4            }
 335   3            if((adc_yssb>color_grn_base-10) && (adc_yssb<color_grn_base+10)) {
 336   4              //uart1_send_str("GRN");
 337   4              parse_cmd((u8 *)"$DGT:19-27,1!");
 338   4              beep_on_times(1, 100);
 339   4            }
 340   3          } else if((adc_yssb>color_blu_base-10) && (adc_yssb<color_blu_base+10)) {
 341   3            //BLU
 342   3            for(i=0;i<5;i++) {
 343   4              adc_yssb = get_adc_yssb_middle();
 344   4              mdelay(20);
 345   4            }
 346   3            if((adc_yssb>color_blu_base-10) && (adc_yssb<color_blu_base+10)) {
 347   4              //uart1_send_str("BLU");
 348   4              parse_cmd((u8 *)"$DGT:28-36,1!");
 349   4              beep_on_times(1, 100);
 350   4            }
 351   3          }  
 352   2          
 353   2        } 
 354   1      }
 355          /*************************************************************
 356          函数名称：smart_soundjiaqu()
 357          功能介绍：检测1S内声音次数，响一次夹取物体放到一边，响俩次放另一边
 358          函数参数：无
 359          返回值：  无  
 360          *************************************************************/
 361          void smart_soundjiaqu(void) {
 362   1        
C51 COMPILER V9.56.0.0   Z_SENSOR                                                          09/20/2018 15:06:25 PAGE 7   

 363   1        static u32 systick_ms_bak = 0, systick_ms_bak2 = 0;
 364   1        static int soundCount = 0;
 365   1      //  GPIO_InitTypeDef GPIO_InitStructure;
 366   1        
 367   1        
 368   1        if(group_do_ok == 0)return;//有动作执行，直接返回
 369   1        if(check_dj_state())return;
 370   1      
 371   1        if(millis() - systick_ms_bak > 10) {//计算在一秒内有几次响声
 372   2          systick_ms_bak = millis();
 373   2          if(sound() == 0) {
 374   3            soundCount++;
 375   3            while(sound() == 0);
 376   3            if(soundCount == 1)systick_ms_bak2 = millis();
 377   3          }
 378   2        }
 379   1        
 380   1        if(millis() - systick_ms_bak2 > 1000) {
 381   2          systick_ms_bak2  = millis();
 382   2          
 383   2      //    if(soundCount) {
 384   2      //      sprintf((char *)uart_receive_buf, "soundCount = %d\r\n", (int)soundCount);
 385   2      //      uart1_send_str(uart_receive_buf);
 386   2      //    } 
 387   2          
 388   2          if(soundCount>1) {      //右放
 389   3            parse_cmd((u8 *)"$DGT:28-36,1!");
 390   3            beep_on_times(2, 100);
 391   3        
 392   3          } else if(soundCount>0){  //左放
 393   3            parse_cmd((u8 *)"$DGT:19-27,1!");
 394   3            beep_on_times(1, 100);
 395   3          } 
 396   2          soundCount = 0; 
 397   2        }
 398   1      
 399   1        
 400   1        
 401   1      }
 402          /*************************************************************
 403          函数名称：smart_xunjicsbjiaqu()
 404          功能介绍：在循迹的过程中实现定距夹取功能
 405          函数参数：无
 406          返回值：  无  
 407          *************************************************************/
 408          void smart_xunjicsbjiaqu() {
 409   1        static u32 systick_ms_bak = 0, nextStepTime = 50;
 410   1        int adc_csb;  
 411   1        if(group_do_ok == 0)return;
 412   1        if(check_dj_state())return;
 413   1        adc_csb = get_adc_csb_middle();//获取a0的ad值，计算出距离
 414   1        if(millis() - systick_ms_bak > nextStepTime) {
 415   2          systick_ms_bak = millis();
 416   2          //sprintf((char *)uart_receive_buf, "adc0 = %d\r\n", adc_a0);
 417   2          //uart1_send_str(uart_receive_buf);
 418   2          
 419   2          if(nextStepTime > 2000)beep_on_times(1, 300);
 420   2          
 421   2          if((adc_csb > 100-15) && (adc_csb < 100+15)) {//距离290mm左右就夹取
 422   3            car_pwm_set(0, 0);
 423   3            nextStepTime = 10000;
 424   3            parse_cmd((u8 *)"$DGT:3-11,1!");
C51 COMPILER V9.56.0.0   Z_SENSOR                                                          09/20/2018 15:06:25 PAGE 8   

 425   3          } else {
 426   3            smart_xunji();
 427   3            nextStepTime = 50;
 428   3          }
 429   2        }
 430   1      }
 431          /*************************************************************
 432          函数名称：smart_xunjiyanse()
 433          功能介绍：在循迹的过程中实现颜色识别功能，并将颜色模块移开
 434          函数参数：无
 435          返回值：  无  
 436          *************************************************************/
 437          void smart_xunjiyanse(void) { 
 438   1        static u8 getCount = 0, getCountOk = 0, i, shibieOK = 0;
 439   1        static u32 systick_ms_bak = 0, systick_ms_bak2 = 0,  systick_ms_bak3 = 0;
 440   1        static int adc_yssb;
 441   1        
 442   1        if(group_do_ok == 0)return;
 443   1        if(check_dj_state())return;
 444   1        
 445   1      //  sprintf((char *)uart_receive_buf, "millis() = %ld  systick_ms_bak3 = %ld  nextComeTime = %ld\r\n", mill
             -is(), systick_ms_bak3, nextComeTime);
 446   1      //  uart1_send_str(uart_receive_buf);
 447   1          
 448   1        //每20ms获取一次数据
 449   1        if(millis() - systick_ms_bak2 > 20) {
 450   2          systick_ms_bak2 = millis();
 451   2          getCount ++;
 452   2          adc_yssb = get_adc_yssb_middle();
 453   2          if( getCount >= 5) {
 454   3            getCount = 0;
 455   3            getCountOk = 1;
 456   3          }
 457   2        }
 458   1        
 459   1        //每5次识别一次
 460   1        if((millis() - systick_ms_bak > 100) && (getCountOk == 1)) {
 461   2          systick_ms_bak = millis();
 462   2          getCountOk = 0;
 463   2          //获取a0的ad值
 464   2          //sprintf((char *)uart_receive_buf, "adc_yssb = %d\r\n", adc_yssb);
 465   2          //uart1_send_str(uart_receive_buf);
 466   2          
 467   2          if((adc_yssb>color_red_base-10) && (adc_yssb<color_red_base+10)) {
 468   3            //RED
 469   3            car_pwm_set(0, 0);
 470   3            for(i=0;i<5;i++) {
 471   4              adc_yssb = get_adc_yssb_middle();
 472   4              mdelay(20);
 473   4            }
 474   3            if((adc_yssb>color_red_base-10) && (adc_yssb<color_red_base+10)) {
 475   4              //uart1_send_str("RED");
 476   4              shibieOK = 1;
 477   4              //parse_cmd((u8 *)"$DGT:12-18,1!");
 478   4              
 479   4              parse_cmd((u8 *)"$DGT:19-27,1!");
 480   4              beep_on_times(1, 100);
 481   4            }
 482   3      
 483   3          } else if((adc_yssb>color_blu_base-10) && (adc_yssb<color_blu_base+10)) {
 484   3            //BLU
 485   3            car_pwm_set(0, 0);
C51 COMPILER V9.56.0.0   Z_SENSOR                                                          09/20/2018 15:06:25 PAGE 9   

 486   3            for(i=0;i<5;i++) {
 487   4              adc_yssb = get_adc_yssb_middle();
 488   4              mdelay(20);
 489   4            }
 490   3            if((adc_yssb>color_blu_base-10) && (adc_yssb<color_blu_base+10)) {
 491   4              //uart1_send_str("BLU");
 492   4              shibieOK = 1;
 493   4              
 494   4              parse_cmd((u8 *)"$DGT:28-36,1!");
 495   4              beep_on_times(1, 100);
 496   4            }
 497   3          } else {
 498   3            shibieOK = 0;
 499   3          } 
 500   2          
 501   2        } 
 502   1        
 503   1        if(shibieOK == 0) {
 504   2          if(millis() - systick_ms_bak3 > 50) {
 505   3            systick_ms_bak3 = millis();
 506   3            smart_xunji();
 507   3          }
 508   2        }
 509   1      }
 510          /*************************************************************
 511          函数名称：smart_yssb_verify()
 512          功能介绍：颜色校准函数
 513          函数参数：无
 514          返回值：  无  
 515          *************************************************************/
 516          void smart_yssb_verify(void) {
 517   1        u16 adc_yssb, i;
 518   1          
 519   1        //校验红色
 520   1        beep_on_times(1,1000);
 521   1        for(i=0;i<500;i++) {
 522   2          adc_yssb = get_adc_yssb_middle();
 523   2          mdelay(10);
 524   2        }
 525   1        color_red_base = adc_yssb;
 526   1        beep_on_times(1,1000);
 527   1        
 528   1        //校验绿色
 529   1        beep_on_times(2,300);
 530   1        for(i=0;i<500;i++) {
 531   2          adc_yssb = get_adc_yssb_middle();
 532   2          mdelay(10);
 533   2        }
 534   1        color_grn_base = adc_yssb;
 535   1        beep_on_times(1,1000);
 536   1        
 537   1        //校验蓝色
 538   1        beep_on_times(3,200);
 539   1        for(i=0;i<500;i++) {
 540   2          adc_yssb = get_adc_yssb_middle();
 541   2          mdelay(10);
 542   2        }
 543   1        color_blu_base = adc_yssb;
 544   1        beep_on_times(1,1000);
 545   1      
 546   1        eeprom_info.color_red_base = color_red_base;
 547   1        eeprom_info.color_grn_base = color_grn_base;
C51 COMPILER V9.56.0.0   Z_SENSOR                                                          09/20/2018 15:06:25 PAGE 10  

 548   1        eeprom_info.color_blu_base = color_blu_base;
 549   1        
 550   1        //存储
 551   1        rewrite_eeprom();
 552   1      
 553   1        //打印测试
 554   1        sprintf((char *)uart_receive_buf, "red = %d grn = %d blu = %d\r\n", color_red_base, color_grn_base, color
             -_blu_base);
 555   1        uart1_send_str(uart_receive_buf);
 556   1        
 557   1        smart_mode = 10;
 558   1        
 559   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   3364    ----
   CONSTANT SIZE    =    121    ----
   XDATA SIZE       =    107      15
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
